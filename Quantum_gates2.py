import numpy as np
import matplotlib.pyplot as plt

# ========== 1. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∫—É–±–∏—Ç–∞ ==========
def visualize_qubit(qubit, title="–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É–±–∏—Ç–∞"):
    """
    –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∫—É–±–∏—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ |0‚ü© –∏ |1‚ü©.
    """
    probabilities = np.abs(qubit.state) ** 2
    labels = ['|0‚ü©', '|1‚ü©']

    plt.bar(labels, probabilities, color=['#4A90E2', '#50E3C2'])
    plt.ylim(0, 1)
    plt.title(title)
    plt.ylabel('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å')
    for i, v in enumerate(probabilities):
        plt.text(i, v + 0.02, f"{v:.2f}", ha='center')
    plt.show()


# ========== 2. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—ã –∫—É–±–∏—Ç–æ–≤ ==========
def visualize_pair(state_vector, title="–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä—ã –∫—É–±–∏—Ç–æ–≤"):
    """
    –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π |00‚ü©, |01‚ü©, |10‚ü©, |11‚ü©.
    """
    probabilities = np.abs(state_vector) ** 2
    labels = ['|00‚ü©', '|01‚ü©', '|10‚ü©', '|11‚ü©']

    plt.bar(labels, probabilities, color=['#4A90E2', '#50E3C2', 'orange', '#AD66D5'])
    plt.ylim(0, 1)
    plt.title(title)
    plt.ylabel('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å')
    for i, v in enumerate(probabilities):
        plt.text(i, v + 0.02, f"{v:.2f}", ha='center')
    plt.show()


# ========== 3. –ö–ª–∞—Å—Å Qubit ==========
class Qubit:
    def __init__(self, alpha=1.0, beta=0.0):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫—É–±–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ |œà‚ü© = Œ±|0‚ü© + Œ≤|1‚ü©.
        """
        self.state = np.array([complex(alpha), complex(beta)], dtype=complex)
        self.normalize()

    def normalize(self):
        """
        –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é: |Œ±|¬≤ + |Œ≤|¬≤ = 1.
        """
        norm = np.linalg.norm(self.state)
        if norm == 0:
            raise ValueError("–ù—É–ª–µ–≤–æ–π –≤–µ–∫—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º.")
        self.state /= norm

    def apply_gate(self, gate_matrix):
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∫–≤–∞–Ω—Ç–æ–≤—ã–π –≥–µ–π—Ç –∫ —Ç–µ–∫—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é.
        """
        self.state = np.dot(gate_matrix, self.state)

    def measure(self):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–≤–∞–Ω—Ç–æ–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0 –∏–ª–∏ 1 –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π.
        """
        probabilities = np.abs(self.state) ** 2
        return np.random.choice([0, 1], p=probabilities)

    def __str__(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—É–±–∏—Ç–∞.
        """
        return f"{self.state[0]:.2f}|0‚ü© + {self.state[1]:.2f}|1‚ü©"


# ========== 4. –ì–µ–π—Ç—ã –ü–∞—É–ª–∏ ==========
def pauli_x():
    return np.array([[0, 1],
                     [1, 0]], dtype=complex)

def pauli_y():
    return np.array([[0, -1j],
                     [1j, 0]], dtype=complex)

def pauli_z():
    return np.array([[1, 0],
                     [0, -1]], dtype=complex)

# ========== 5. –ì–µ–π—Ç –ê–¥–∞–º–∞—Ä–∞ ==========
def hadamard():
    """
    –ì–µ–π—Ç –ê–¥–∞–º–∞—Ä–∞: —Å–æ–∑–¥–∞–µ—Ç —Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    return (1 / np.sqrt(2)) * np.array([[1, 1],
                                        [1, -1]], dtype=complex)


# ========== 6. –ì–µ–π—Ç CNOT (–¥–≤—É—Ö–∫—É–±–∏—Ç–Ω—ã–π) ==========
def cnot():
    """
    –ì–µ–π—Ç CNOT: controlled-NOT, –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –ø–∞—Ä–µ –∫—É–±–∏—Ç–æ–≤.
    """
    return np.array([[1, 0, 0, 0],
                     [0, 1, 0, 0],
                     [0, 0, 0, 1],
                     [0, 0, 1, 0]], dtype=complex)


# ========== 7. –ö–ª–∞—Å—Å –ø–∞—Ä—ã –∫—É–±–∏—Ç–æ–≤ ==========
class QubitPair:
    def __init__(self, q1: Qubit, q2: Qubit):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ä—É –∫—É–±–∏—Ç–æ–≤ (—Ç–µ–Ω–∑–æ—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π).
        """
        self.state = np.kron(q1.state, q2.state)

    def apply_gate(self, gate_matrix):
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç –¥–≤—É—Ö–∫—É–±–∏—Ç–Ω—ã–π –≥–µ–π—Ç (–º–∞—Ç—Ä–∏—Ü–∞ 4x4).
        """
        self.state = np.dot(gate_matrix, self.state)

    def __str__(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–≤—É—Ö–∫—É–±–∏—Ç–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
        """
        return (f"{self.state[0]:.2f}|00‚ü© + {self.state[1]:.2f}|01‚ü© + "
                f"{self.state[2]:.2f}|10‚ü© + {self.state[3]:.2f}|11‚ü©")


# ==========================
# üî¨ –ü—Ä–∏–º–µ—Ä—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
# ==========================

# ‚ñ∂ –ü—Ä–∏–º–µ—Ä 1: –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ X/Y/Z-–≥–µ–π—Ç—ã
q = Qubit(1, 0)  # |0‚ü©
print("–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:", q)
visualize_qubit(q, "–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ |0‚ü©")

q.apply_gate(pauli_x())
print("–ü–æ—Å–ª–µ X-–≥–µ–π—Ç–∞:", q)
visualize_qubit(q, "–ü–æ—Å–ª–µ X-–≥–µ–π—Ç–∞")

q.apply_gate(pauli_y())
print("–ü–æ—Å–ª–µ Y-–≥–µ–π—Ç–∞:", q)
visualize_qubit(q, "–ü–æ—Å–ª–µ Y-–≥–µ–π—Ç–∞")

q.apply_gate(pauli_z())
print("–ü–æ—Å–ª–µ Z-–≥–µ–π—Ç–∞:", q)
visualize_qubit(q, "–ü–æ—Å–ª–µ Z-–≥–µ–π—Ç–∞")


# ‚ñ∂ –ü—Ä–∏–º–µ—Ä 2: –°—É–ø–µ—Ä–ø–æ–∑–∏—Ü–∏—è —á–µ—Ä–µ–∑ H
q_super = Qubit(1, 0)           # |0‚ü©
q_super.apply_gate(hadamard()) # H|0‚ü© ‚Üí —Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü–∏—è
print("–°—É–ø–µ—Ä–ø–æ–∑–∏—Ü–∏—è –ø–æ—Å–ª–µ H:", q_super)
visualize_qubit(q_super, "–ö—É–±–∏—Ç –ø–æ—Å–ª–µ H (—Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü–∏—è)")


# ‚ñ∂ –ü—Ä–∏–º–µ—Ä 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
q1 = Qubit(1, 0)                # –ü–µ—Ä–≤—ã–π –∫—É–±–∏—Ç |0‚ü©
q2 = Qubit(1, 0)                # –í—Ç–æ—Ä–æ–π –∫—É–±–∏—Ç |0‚ü©

q1.apply_gate(hadamard())      # H –Ω–∞ –ø–µ—Ä–≤—ã–π ‚Üí —Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü–∏—è

pair = QubitPair(q1, q2)       # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—É
pair.apply_gate(cnot())        # CNOT ‚Üí –∑–∞–ø—É—Ç—ã–≤–∞–Ω–∏–µ
print("–ó–∞–ø—É—Ç–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (Bell):", pair)
visualize_pair(pair.state, "–ó–∞–ø—É—Ç–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Bell: (|00‚ü© + |11‚ü©)/‚àö2")